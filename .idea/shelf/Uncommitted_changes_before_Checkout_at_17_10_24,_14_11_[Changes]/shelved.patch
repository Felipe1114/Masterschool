Index: codio_prime_minister.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>def make_parameters(range_list):\n    prime_numbers = []\n    is_two_in_range(range_list, prime_numbers)\n    odd_numbers = get_all_odd_numbers(range_list)\n    middle_index = divide_len_odd_numbers(odd_numbers)\n    list_divider = split_odd_numbers(odd_numbers, middle_index)\n    iterate_thrue_odd_numbers(odd_numbers, list_divider, prime_numbers)\n\ndef get_range():\n    range_start = int(input(\"Enter start range: \"))\n    range_end = int(input(\"Enter end range: \"))\n    range_list = [range_start, range_end]\n    return range_list\n\ndef divide_len_odd_numbers(odd_numbers):\n    return len(odd_numbers) // 2 + 2\n\ndef split_odd_numbers(odd_numbers, middle_index):\n    return odd_numbers[:middle_index]\n\ndef get_all_odd_numbers(range_list):\n    odd_numbers = []\n    for i in range(range_list[0], range_list[1]):\n        if i % 2 != 0: odd_numbers.append(i)\n    is_one_in_list(odd_numbers)\n    return odd_numbers\n\ndef iterate_thrue_odd_numbers(odd_numbers, list_divider, prime_numbers):\n    for index_numbers in range(len(odd_numbers)):\n        check_list = []\n        for index_divider in range(len(list_divider)):\n            if odd_numbers[index_numbers] == list_divider[index_divider]:\n                #print(\"this is printed, wehn number and divider are equal: \\n\", odd_numbers[index_numbers], list_divider[index_divider])\n                pass\n            else: #hier wird die check_list ausgefÃ¼llt\n                check_list = is_number_prime(odd_numbers, list_divider, index_numbers, index_divider, check_list)\n                #print(check_list)\n            if index_divider == len(list_divider) - 1:  # hier ist der fehler;\n                #print(check_list)\n                is_False_in_list(check_list, prime_numbers, odd_numbers, index_numbers)\n    print_all_prime_numbers(prime_numbers)\n\ndef is_number_prime(odd_numbers, list_divider, index_numbers, index_divider, check_list):\n    #print(f\"This ist the number: {odd_numbers[index_numbers]} and this is the divider {list_divider[index_divider]}\")\n    if odd_numbers[index_numbers] % list_divider[index_divider] == 0:\n        check_list.append(False)\n    else:\n        check_list.append(True)\n    return check_list\n\ndef is_False_in_list(check_list, prime_numbers, odd_numbers, index_numbers):\n    if False in check_list:\n        return None\n    else:\n        prime_numbers.append(odd_numbers[index_numbers])\n\ndef print_all_prime_numbers(prime_numbers):\n    for number in prime_numbers:\n        print(f\"the number {number} is prime\")\n\ndef is_two_in_range(range_list, prime_numbers):\n    for number in range(range_list[0], range_list[1]):\n        if number == 2:\n            prime_numbers.append(2)\n            return prime_numbers\n\ndef is_one_in_list(number_list):\n    for number in number_list:\n        if number == 1:\n            number_list.remove(1)\n            break\n\ndef main():\n    make_parameters(get_range())\n\nif __name__ == \"__main__\":\n    main()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/codio_prime_minister.py b/codio_prime_minister.py
--- a/codio_prime_minister.py	(revision c6ba16459d2ebd0ebce28108bbe774fb0b55810e)
+++ b/codio_prime_minister.py	(date 1729111288160)
@@ -1,6 +1,6 @@
 def make_parameters(range_list):
     prime_numbers = []
-    is_two_in_range(range_list, prime_numbers)
+    is_two_in_range(range_list, prime_numbers) #
     odd_numbers = get_all_odd_numbers(range_list)
     middle_index = divide_len_odd_numbers(odd_numbers)
     list_divider = split_odd_numbers(odd_numbers, middle_index)
@@ -29,19 +29,16 @@
     for index_numbers in range(len(odd_numbers)):
         check_list = []
         for index_divider in range(len(list_divider)):
+            # hier die beschreibung der funktion oder des codes.
             if odd_numbers[index_numbers] == list_divider[index_divider]:
-                #print("this is printed, wehn number and divider are equal: \n", odd_numbers[index_numbers], list_divider[index_divider])
-                pass
+                continue # statt pass ist continue der richtige begriff
             else: #hier wird die check_list ausgefÃ¼llt
                 check_list = is_number_prime(odd_numbers, list_divider, index_numbers, index_divider, check_list)
-                #print(check_list)
             if index_divider == len(list_divider) - 1:  # hier ist der fehler;
-                #print(check_list)
                 is_False_in_list(check_list, prime_numbers, odd_numbers, index_numbers)
     print_all_prime_numbers(prime_numbers)
 
 def is_number_prime(odd_numbers, list_divider, index_numbers, index_divider, check_list):
-    #print(f"This ist the number: {odd_numbers[index_numbers]} and this is the divider {list_divider[index_divider]}")
     if odd_numbers[index_numbers] % list_divider[index_divider] == 0:
         check_list.append(False)
     else:

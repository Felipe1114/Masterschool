Index: test_file.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>def has_dot(string):\n    if string.find(\".\") != -1:\n        return True\n    else:\n        return False\n\ndef main():\n    string = \"halle.\"\n    print(has_dot(string))\n\n\ndef is_all_dollar(string):\n    for i in string:\n        if i != \"$\":\n            return False\n    return True\nstring_dollar = \"$$$$$\"\nstring_dot = \"halle\"\nprint(is_all_dollar(string_dollar))\nprint(has_dot(string_dot))\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test_file.py b/test_file.py
--- a/test_file.py	(revision c6ba16459d2ebd0ebce28108bbe774fb0b55810e)
+++ b/test_file.py	(date 1729107975392)
@@ -1,20 +1,17 @@
-def has_dot(string):
-    if string.find(".") != -1:
-        return True
-    else:
-        return False
+def get_input():
+    return input("please write a text: ")
+
+def has_text_20_characters(input):
+    return len(input) >= 20
+
+
 
 def main():
-    string = "halle."
-    print(has_dot(string))
+    is_textlen_20 = 0
+    while
+    has_text_20_characters(get_input)
 
 
-def is_all_dollar(string):
-    for i in string:
-        if i != "$":
-            return False
-    return True
-string_dollar = "$$$$$"
-string_dot = "halle"
-print(is_all_dollar(string_dollar))
-print(has_dot(string_dot))
+if __name__ == "__main__":
+    main()
+
Index: append_vs_conactination.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/append_vs_conactination.py b/append_vs_conactination.py
new file mode 100644
--- /dev/null	(date 1729083537607)
+++ b/append_vs_conactination.py	(date 1729083537607)
@@ -0,0 +1,28 @@
+# unterschied zwischen .append() und concatination
+
+a_list = [1, 2, 3]
+b_list = a_list
+print("hier wurde eine liste geklont")
+print("b_list enthält den gleichen inhalt wie a_list: ", a_list == b_list)
+print("b_list ist a_list: ", a_list is b_list)
+
+b_list.append(4)
+print("jetzt wurde mit append, beide listen aktualisert")
+print(b_list)
+print(a_list)
+print("b_list enthält den gleichen inhalt wie a_list: ", a_list == b_list)
+print("b_list ist a_list: ", a_list is b_list)
+
+b_list += [5]
+print("jetzt wurde mit += die zahl 5 an die liste angehängt")
+print(a_list)
+print(b_list)
+print("b_list enthält den gleichen inhalt wie a_list: ", a_list == b_list)
+print("b_list ist a_list: ", a_list is b_list)
+
+b_list = b_list + [6]
+print("jetzt wurde mit concatination die zahl 7 an liste b_list angehängt")
+print(a_list)
+print(b_list)
+print("b_list enthält den gleichen inhalt wie a_list: ", a_list == b_list)
+print("b_list ist a_list: ", a_list is b_list)
